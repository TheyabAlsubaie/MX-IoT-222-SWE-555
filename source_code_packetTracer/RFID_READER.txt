from time import *
from physical import *
import mqttclient


delayTime= 1000								#comment,  delay Time of the loop
xReadDistance= 50       							#comment,  x axis of the range to sense
yReadDistance= 50        							#comment,  y axis of the range to sense
cardID = 0        								#comment,  that is detected
lastCardID = 0       								#comment,  the last card ID that was detected, to avoid duplicate submission
targetObjectName = 'RFID'							#comment, the object name that we want to detected
targetObjectproperty = 'CardID'							#comment, the object's property name that we are looking to detect
topic='rfid'								#comment, the topic name we are going to publish to upon card detection
brokerAddress='192.168.25.2'							#comment, Broker IP Address
username= 'user1'								#comment, Username
password = '1234'								#comment, Password



def on_connect(status, msg, packet):			#show connection status
	if status == "Success" or status == "Error":
		print status + ": " + msg
	elif status == "":
		print msg
	
def on_disconnect(status, msg, packet):			#show disconnection status
	if status == "Success" or status == "Error":
		print status + ": " + msg
	elif status == "":
		print msg
	

def on_subscribe(status, msg, packet):			#show subscription status
	if status == "Success" or status == "Error":
		print status + ": " + msg
	elif status == "":
		print msg
	

def on_unsubscribe(status, msg, packet):		#show unsubscription status
	if status == "Success" or status == "Error":
		print status + ": " + msg
	elif status == "":
		print msg
	

def on_publish(status, msg, packet):			#show publishing status
	if status == "Success" or status == "Error":
		print status + ": " + msg
	elif status == "":
		print msg
	
def on_message_received(status, msg, packet):  #Invoked when new message received
	# check received message and take action
	if status == "Success" or status == "Error":
		print status + ": " + msg
	
	elif status == "":
		print msg


def proximity ():
	global cardID, lastCardID
	devices = devicesAt(getCenterX(), getCenterY(), xReadDistance, yReadDistance)
	found = False
	for i in xrange(0, len(devices)):
		x=devices[i][0:4]
		if devices[i] is getName() or x is not targetObjectName:
			continue
		cardID = getDeviceProperty(devices[i], targetObjectproperty)
		found = True
		break
	if not found:
		cardID = lastCardID = 0
	else:
		if lastCardID != cardID:
			lastCardID = cardID
			mqttclient.publish(topic,str(cardID),'2')				#comment, upon card detection, publish the card id
										#comment, in order for the security device to assess
										#comment, the legitimacy of the card

	
def main():
	mqttclient.init()
	mqttclient.onConnect(on_connect)
	mqttclient.onDisconnect(on_disconnect)
	mqttclient.onSubscribe(on_subscribe)
	mqttclient.onUnsubscribe(on_unsubscribe)
	mqttclient.onPublish(on_publish)
	mqttclient.onMessageReceived(on_message_received)
	print('Client Initialized')
	mqttclient.connect(broker_add,username,password)
	while not mqttclient.state()["connected"]:		#wait until connected
 		pass				#do nothing
	while True:				#comment, infinite loop of checking the proximity for card presence with a delay
		proximity()
		delay(delayTime)


if __name__ == "__main__":
	main()



